{"version":3,"sources":["components/Header/Header.js","components/SearchField/SearchField.js","components/ImageCard/ImageCard.js","components/ImageCardList/ImageCardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","SearchField","_ref","onPress","onKeyPress","type","placeholder","ImageCard","description","likes","user","url","location","src","alt","title","ImageCardList","response","map","res","i","components_ImageCard_ImageCard","key","alt_description","urls","apiKey","App","_useState","useState","_useState2","Object","slicedToArray","photos","setPhotos","_useState3","_useState4","term","setTerm","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","data","items","wrap","_context","prev","next","fetch","concat","sent","json","results","t0","console","log","stop","apply","this","arguments","useEffect","_x","fetchData","components_Header_Header","components_SearchField_SearchField","e","keyCode","charCode","target","value","ImageCardList_ImageCardList","Boolean","window","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56e5884e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Header.css';\r\n\r\nfunction Header(){\r\n    return (\r\n        <div className=\"\">\r\n            <h1>Photomag</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport './SearchField.css';\r\n\r\nfunction SearchField({onPress}) {\r\n\r\n\treturn(\r\n\t\t<div className=\"search-block\">\r\n\t\t\t<input  \r\n\t\t\t\tonKeyPress={onPress}\r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"Beautiful photo?\" \r\n\t\t\t\t/>\r\n\t\t\t<div className=\"icon\"></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchField;","import React from 'react';\r\nimport './ImageCard.css';\r\n\r\nfunction ImageCard({description, likes, user, url, location}){\r\n    return (\r\n        <div className=\"pa3 ma\">\r\n                <img src={url} alt='' title='' className=\"shadow-3\"/>\r\n                <dl className=\"f7 pa2 ma br3 \">\r\n                    <dt className=\"clip\">Image</dt>        \r\n                    <dd className=\"ml0 black w-100\">Photo by {user}</dd>\r\n                    <dt className=\"clip\">Description</dt>\r\n                    <dd className=\"ml0 black w-100\">{description}</dd>\r\n                    <dt className=\"clip\">Likes</dt>\r\n                    <dd className=\"ml0 black w-100\">{likes} <i className=\"fas fa-heart\"></i> </dd>\r\n                </dl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageCard;","import React from 'react';\r\nimport ImageCard from '../ImageCard/ImageCard';\r\n\r\n\r\nfunction ImageCardList({response}){\r\n\r\n\treturn(\r\n\t\t<div className=\"row\">\r\n\t\t\t{\r\n\t\t\t\tresponse.map((res, i) => {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<div className=\"col-lg-3\">\r\n\t\t\t\t\t\t\t<ImageCard\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\tlikes={response[i].likes}\r\n\t\t\t\t\t\t\t\tdescription={response[i].alt_description}\r\n\t\t\t\t\t\t\t\turl={response[i].urls['regular']}\r\n\t\t\t\t\t\t\t\tuser={response[i].user['name']}\r\n\t\t\t\t\t\t\t/>\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default ImageCardList;","import React, {useState, useEffect} from 'react';\nimport 'tachyons';\nimport './App.css';\nimport Header from '../components/Header/Header.js';\nimport SearchBar from '../components/SearchField/SearchField';\nimport Loader from '../components/Loading/Loading';\nimport ImageCardList from '../components/ImageCardList/ImageCardList';\n\n\nconst apiKey = '581eb4a49e4ae7142198627eae4a64b445a6bd9af7bb96de5a3cf51e2b62d919';\nfunction App() {\n\n  const [photos, setPhotos] = useState([]);\n  const [term, setTerm] = useState('');\n  \n  // Function to setTerm when user inputs\n\n\n  let onKeyPress = (e) => {\n    if(e.keyCode === 13 || e.charCode === 13)\n      setTerm(e.target.value)\n    }\n\n  \n  useEffect(() => {\n    fetchData(term);\n  }, [term]);\n  \n\n  async function fetchData(term){\n    try {\n    let data = await fetch(`https://api.unsplash.com/search/photos?client_id=${apiKey}&per_page=30&query=${term}`);\n    const items = await data.json();\n    setPhotos(items.results);\n    } catch (error) {\n      console.log(`Error is ${error}`)\n    }\n  }\n\n\n  return (\n\n    <div className=\"tc\">\n      <Header/>\n      <SearchBar   \n        onPress={onKeyPress}\n      />\n      <ImageCardList \n        response={photos} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}